name: NPM Publish

on:
  push:
    tags:
      - 'v*'
    paths:
      - 'packages/**'
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Detect package changes
        id: set-matrix
        run: |
          # 获取所有修改的文件
          if [[ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" || -z "${{ github.event.before }}" ]]; then
            # 如果是首次推送或 before 为空，则获取所有文件
            echo "First push or tag creation detected, checking all files in the repository"
            CHANGED_FILES=$(find packages -type f | tr '\n' ' ')
          else
            # 正常情况下获取变更的文件
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} || echo "")
          fi
          
          # 检查每个包是否有变更
          PACKAGES=()
          for dir in packages/*/; do
            PKG_NAME=$(basename $dir)
            if echo "$CHANGED_FILES" | grep -q "^packages/$PKG_NAME/"; then
              PACKAGES+=("$PKG_NAME")
            fi
          done
          
          # 如果是手动触发或标签推送，包含所有包
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/tags/"* ]]; then
            echo "Manual trigger or tag push detected, including all packages"
            PACKAGES=()
            for dir in packages/*/; do
              PKG_NAME=$(basename $dir)
              PACKAGES+=("$PKG_NAME")
            done
          fi
          
          # 输出矩阵
          if [ ${#PACKAGES[@]} -eq 0 ]; then
            echo "No package changes detected"
            echo "matrix={\"package\":[]}" >> $GITHUB_OUTPUT
          else
            JSON_ARRAY=$(printf '"%s",' "${PACKAGES[@]}" | sed 's/,$//')
            echo "matrix={\"package\":[$JSON_ARRAY]}" >> $GITHUB_OUTPUT
            echo "Detected changes in packages: ${PACKAGES[*]}"
          fi

  publish:
    needs: detect-changes
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).package[0] }}
    runs-on: ubuntu-latest
    # 添加权限配置 ↓↓↓
    permissions:
      id-token: write   # 解决来源证明错误
      contents: read     # 确保代码检出权限
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.17.0'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: |
          # 使用 npm install 替代 npm ci，因为 npm ci 需要 package-lock.json
          npm install --ignore-scripts
          npm run build --if-present
      
      - name: Build specific package
        run: |
          cd packages/${{ matrix.package }}
          npm run build --if-present || echo "No build script found for ${{ matrix.package }}"
      
      - name: Run package tests
        run: |
          cd packages/${{ matrix.package }}
          npm test --if-present || echo "No test script found for ${{ matrix.package }}"
      
      - name: Publish to NPM
        run: |
          cd packages/${{ matrix.package }}
          
          # 添加认证配置
          echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" > .npmrc
          
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          echo "Package: $PACKAGE_NAME, Version: $CURRENT_VERSION"
          
          # 健壮的版本检查
          if npm view $PACKAGE_NAME@$CURRENT_VERSION version >/dev/null 2>&1; then
            echo "✅ $CURRENT_VERSION already published, skipping"
          else
            echo "🚀 Publishing $PACKAGE_NAME@$CURRENT_VERSION to NPM"
            npm publish --access public
          fi
          
          # 清理凭证
          rm -f .npmrc
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}